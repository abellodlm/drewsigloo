service: flr-slack-bot

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 300  # 5 minutes timeout - optimized for cost
  memorySize: 1024  # Reasonable memory allocation  
  architecture: arm64  # ARM64 is 20% cheaper than x86_64
  
  environment:
    S3_BUCKET_NAME: ${self:custom.bucketName}
    STAGE: ${self:provider.stage}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    COINGECKO_API_KEY: ${env:COINGECKO_API_KEY}
    API_KEY: ${env:API_KEY}
    API_SECRET: ${env:API_SECRET}
    API_HOST: ${env:API_HOST}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: "arn:aws:s3:::${self:custom.bucketName}"
        - Effect: Allow
          Action:
            - ssm:GetParameters
            - ssm:GetParametersByPath
            - ssm:GetParameter
          Resource: 
            - "arn:aws:ssm:${self:provider.region}:*:parameter/slack-bot*"
            - "arn:aws:ssm:${self:provider.region}:*:parameter/flr-slack-bot*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-slackBot"

custom:
  bucketName: flr-reports-${self:provider.stage}-${aws:accountId}

functions:
  slackBot:
    handler: handler.lambda_handler
    events:
      - http:
          path: /slack/flr-report
          method: post
          cors: true
    environment:
      S3_BUCKET_NAME: ${self:custom.bucketName}
      SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
      COINGECKO_API_KEY: ${env:COINGECKO_API_KEY}
      API_KEY: ${env:API_KEY}
      API_SECRET: ${env:API_SECRET}
      API_HOST: ${env:API_HOST}
      SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    package:
      patterns:
        - '!**'
        - 'handler.py'
        - 'scripts/**'
        - 'requirements-simple.txt'

resources:
  Outputs:
    SlackWebhookUrl:
      Description: "Slack webhook URL for /flr-report command"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
            - "/slack/flr-report"
      Export:
        Name: ${self:service}-${self:provider.stage}-webhook-url

# plugins:
#   - serverless-python-requirements

# Package configuration
package:
  patterns:
    - '!CMCFLR/**'  # Exclude original folder
    - '!.git/**'
    - '!.env'
    - '!*.md'
    - '!tests/**'
    - 'scripts/**'
    - 'handler.py'
    - 'requirements.txt'